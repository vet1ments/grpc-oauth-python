# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: oauthapp/v1/token.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import oauthapp.v1.token_pb2


class TokeServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetToken(self, stream: 'grpclib.server.Stream[oauthapp.v1.token_pb2.GetTokenRequest, oauthapp.v1.token_pb2.GetTokenResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetTokenInfo(self, stream: 'grpclib.server.Stream[oauthapp.v1.token_pb2.GetTokenInfoRequest, oauthapp.v1.token_pb2.GetTokenInfoResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/oauthapp.v1.TokeService/GetToken': grpclib.const.Handler(
                self.GetToken,
                grpclib.const.Cardinality.UNARY_UNARY,
                oauthapp.v1.token_pb2.GetTokenRequest,
                oauthapp.v1.token_pb2.GetTokenResponse,
            ),
            '/oauthapp.v1.TokeService/GetTokenInfo': grpclib.const.Handler(
                self.GetTokenInfo,
                grpclib.const.Cardinality.UNARY_UNARY,
                oauthapp.v1.token_pb2.GetTokenInfoRequest,
                oauthapp.v1.token_pb2.GetTokenInfoResponse,
            ),
        }


class TokeServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetToken = grpclib.client.UnaryUnaryMethod(
            channel,
            '/oauthapp.v1.TokeService/GetToken',
            oauthapp.v1.token_pb2.GetTokenRequest,
            oauthapp.v1.token_pb2.GetTokenResponse,
        )
        self.GetTokenInfo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/oauthapp.v1.TokeService/GetTokenInfo',
            oauthapp.v1.token_pb2.GetTokenInfoRequest,
            oauthapp.v1.token_pb2.GetTokenInfoResponse,
        )
