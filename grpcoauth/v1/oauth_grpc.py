# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: grpcoauth/v1/oauth.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.protobuf.empty_pb2
import grpcoauth.v1.enums_pb2
import grpcoauth.v1.oauth_pb2


class Oauth2ServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetAuthorizeCode(self, stream: 'grpclib.server.Stream[grpcoauth.v1.oauth_pb2.GetAuthorizeCodeRequest, grpcoauth.v1.oauth_pb2.GetAuthorizeCodeResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetToken(self, stream: 'grpclib.server.Stream[grpcoauth.v1.oauth_pb2.GetTokenRequest, grpcoauth.v1.oauth_pb2.GetTokenResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/grpcoauth.v1.Oauth2Service/GetAuthorizeCode': grpclib.const.Handler(
                self.GetAuthorizeCode,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpcoauth.v1.oauth_pb2.GetAuthorizeCodeRequest,
                grpcoauth.v1.oauth_pb2.GetAuthorizeCodeResponse,
            ),
            '/grpcoauth.v1.Oauth2Service/GetToken': grpclib.const.Handler(
                self.GetToken,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpcoauth.v1.oauth_pb2.GetTokenRequest,
                grpcoauth.v1.oauth_pb2.GetTokenResponse,
            ),
        }


class Oauth2ServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetAuthorizeCode = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpcoauth.v1.Oauth2Service/GetAuthorizeCode',
            grpcoauth.v1.oauth_pb2.GetAuthorizeCodeRequest,
            grpcoauth.v1.oauth_pb2.GetAuthorizeCodeResponse,
        )
        self.GetToken = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpcoauth.v1.Oauth2Service/GetToken',
            grpcoauth.v1.oauth_pb2.GetTokenRequest,
            grpcoauth.v1.oauth_pb2.GetTokenResponse,
        )


class OauthCallbackServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Callback(self, stream: 'grpclib.server.Stream[grpcoauth.v1.oauth_pb2.CallbackRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/grpcoauth.v1.OauthCallbackService/Callback': grpclib.const.Handler(
                self.Callback,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpcoauth.v1.oauth_pb2.CallbackRequest,
                google.protobuf.empty_pb2.Empty,
            ),
        }


class OauthCallbackServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Callback = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpcoauth.v1.OauthCallbackService/Callback',
            grpcoauth.v1.oauth_pb2.CallbackRequest,
            google.protobuf.empty_pb2.Empty,
        )
